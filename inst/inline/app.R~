#
# This is a Shiny web application. You can run the application by clicking
# the 'Run App' button above.
#
# Find out more about building applications with Shiny here:
#
#    http://shiny.rstudio.com/
#

library(shiny)

outfile <- getShinyOption("outfile")
htbl <- getShinyOption("htbl")

filenames <- htbl$filename
sub_id <- as.character(htbl$sub_id)

names(filenames) = paste(sub_id, " [ ]")
scores <- rep(NA_integer_, length(sub_id))
fbk <- list()
first <- TRUE

ftbl <- tibble::tibble(fname = htbl$filename,
                       sub_id = htbl$sub_id)

if (file.exists(outfile)) {
  ff <- readRDS(outfile)
  ff2 <- dplyr::mutate(ff, sub_id = as.character(sub_id))
  ff3 <- dplyr::inner_join(ftbl, "sub_id")
  sub_id <- as.character(ff3$sub_id)
  scores <- ff3$score
  have_fbk <- !sapply(ff3$fbk, is.null)
  fbk <- ff3$fbk[have_fbk]
  names(fbk) <- ff3$sub_id[have_fbk]
  filenames <- ff3$fname
  names(filenames) <- paste0(sub_id, " [",
                             ifelse(is.na(ff3$score), " ", ff3$score),
                             "]")
}

ui <- fluidPage(
   
   # Sidebar with a select input
   sidebarLayout(
      sidebarPanel(width = 2,
         selectInput("file",
                     "Submission",
                     choices = filenames),
         actionButton("sort",
                      "Sort"),
         actionButton("quit",
                      "Quit")
      ),
      
      mainPanel(width = 10,
                htmlOutput("inc"),
                sliderInput("score", "Score", 0L, 5L,
                            ifelse(is.na(scores[1]), 3L, scores[1]),
                            1L),
                textAreaInput("feedback", "Feedback",
                              fbk[[sub_id[1]]],
                              width = 600),
                actionButton("nextf", "Update")
      )
   )
)

server <- function(input, output, session) {
  save_all <- function() {
    t1 <- tibble(sub_id = as.integer(rv$sub_id),
                 score = rv$scores)
    t2 <- tibble(sub_id = as.integer(names(rv$fbk)),
                 fbk = rv$fbk)
    saveRDS(left_join(t1, t2, "sub_id"), "results.rds")
  }

  rv <- reactiveValues(
    filenames = filenames,
    sub_id = sub_id,
    fbk = fbk,
    scores = scores)
  
  output$inc <- renderUI({
    if (file.exists(input$file)) {
      withMathJax(includeHTML(input$file))
    }
  })

  observeEvent(input$nextf, {
    ix <- which(rv$filenames == input$file)
    ## update values
    rv$scores[ix] <- input$score
    rv$fbk[rv$sub_id[ix]] <- input$feedback
    save_all()
    
    newfbk <- rv$fbk[[rv$sub_id[ix + 1L]]]
    names(rv$filenames) <- paste0(
      rv$sub_id, " [", ifelse(is.na(rv$scores), " ", rv$scores), "]")
    updateSelectInput(
      session, "file",
      choices = rv$filenames,
      selected = rv$filenames[ix + 1L]
    )
    updateTextAreaInput(
      session, "feedback",
      value = ifelse(is.null(newfbk), "", newfbk)
    )
    ##updateSliderInput(session, "score",
    ##                  value = ifelse(is.na(rv$scores[ix + 1L]), 3L,
    ##                              rv$scores[ix + 1L]))
  })

  observeEvent(input$file, {
    ix <- which(rv$filenames == input$file)
    sub <- rv$sub_id[ix]
    updateSliderInput(session, "score",
                      value = ifelse(is.na(rv$scores[ix]), 3L,
                                     rv$scores[ix]))
    updateTextAreaInput(session, "feedback",
                        value = ifelse(is.null(rv$fbk[[sub]]), "",
                                       rv$fbk[[sub]]))
  })
  
  observeEvent(input$sort, {
    ix <- order(rv$scores)
    rv$filenames <- rv$filenames[ix]
    rv$scores <- rv$scores[ix]
    rv$sub_id <- rv$sub_id[ix]
    updateSelectInput(session, "file", choices = rv$filenames)
  })

  observeEvent(input$quit, {
    save_all()
    stopApp(outfile)
  })
}

shinyApp(ui = ui, server = server)
